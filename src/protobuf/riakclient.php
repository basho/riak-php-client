<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.3
// Source: riakclient.proto
//   Date: 2011-12-22 22:28:17

// @@protoc_insertion_point(scope_file)

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class PingReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\PingReq');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.PingReq)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.PingReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class PingResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\PingResp');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.PingResp)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.PingResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class ErrorResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\ErrorResp');

      // required  errmsg = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errmsg";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ErrorResp:errmsg)
      $descriptor->addField($f);

      // required  errcode = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "errcode";
      $f->type      = 13;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ErrorResp:errcode)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.ErrorResp)

      return $descriptor;
    }

    /**  @var string */
    public $errmsg = null;
    
    /**  @var int */
    public $errcode = null;
    

    /**
     * Check if <errmsg> has a value
     *
     * @return boolean
     */
    public function hasErrmsg(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errmsg> value
     *
     * @return \Riak\DrSLump\ErrorResp
     */
    public function clearErrmsg(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errmsg> value
     *
     * @return string
     */
    public function getErrmsg(){
      return $this->_get(1);
    }
    
    /**
     * Set <errmsg> value
     *
     * @param string $value
     * @return \Riak\DrSLump\ErrorResp
     */
    public function setErrmsg( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <errcode> has a value
     *
     * @return boolean
     */
    public function hasErrcode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <errcode> value
     *
     * @return \Riak\DrSLump\ErrorResp
     */
    public function clearErrcode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <errcode> value
     *
     * @return int
     */
    public function getErrcode(){
      return $this->_get(2);
    }
    
    /**
     * Set <errcode> value
     *
     * @param int $value
     * @return \Riak\DrSLump\ErrorResp
     */
    public function setErrcode( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.ErrorResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetClientIdReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetClientIdReq');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetClientIdReq)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetClientIdReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetClientIdResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetClientIdResp');

      // required  client_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client_id";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetClientIdResp:client_id)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetClientIdResp)

      return $descriptor;
    }

    /**  @var string */
    public $client_id = null;
    

    /**
     * Check if <client_id> has a value
     *
     * @return boolean
     */
    public function hasClientId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client_id> value
     *
     * @return \Riak\DrSLump\GetClientIdResp
     */
    public function clearClientId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client_id> value
     *
     * @return string
     */
    public function getClientId(){
      return $this->_get(1);
    }
    
    /**
     * Set <client_id> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetClientIdResp
     */
    public function setClientId( $value){
      return $this->_set(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetClientIdResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class SetClientIdReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\SetClientIdReq');

      // required  client_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "client_id";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.SetClientIdReq:client_id)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.SetClientIdReq)

      return $descriptor;
    }

    /**  @var string */
    public $client_id = null;
    

    /**
     * Check if <client_id> has a value
     *
     * @return boolean
     */
    public function hasClientId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <client_id> value
     *
     * @return \Riak\DrSLump\SetClientIdReq
     */
    public function clearClientId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <client_id> value
     *
     * @return string
     */
    public function getClientId(){
      return $this->_get(1);
    }
    
    /**
     * Set <client_id> value
     *
     * @param string $value
     * @return \Riak\DrSLump\SetClientIdReq
     */
    public function setClientId( $value){
      return $this->_set(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.SetClientIdReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class SetClientIdResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\SetClientIdResp');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.SetClientIdResp)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.SetClientIdResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetServerInfoReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetServerInfoReq');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetServerInfoReq)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetServerInfoReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetServerInfoResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetServerInfoResp');

      // optional  node = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetServerInfoResp:node)
      $descriptor->addField($f);

      // optional  server_version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "server_version";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetServerInfoResp:server_version)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetServerInfoResp)

      return $descriptor;
    }

    /**  @var string */
    public $node = null;
    
    /**  @var string */
    public $server_version = null;
    

    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node> value
     *
     * @return \Riak\DrSLump\GetServerInfoResp
     */
    public function clearNode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node> value
     *
     * @return string
     */
    public function getNode(){
      return $this->_get(1);
    }
    
    /**
     * Set <node> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetServerInfoResp
     */
    public function setNode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <server_version> has a value
     *
     * @return boolean
     */
    public function hasServerVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <server_version> value
     *
     * @return \Riak\DrSLump\GetServerInfoResp
     */
    public function clearServerVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <server_version> value
     *
     * @return string
     */
    public function getServerVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <server_version> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetServerInfoResp
     */
    public function setServerVersion( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetServerInfoResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:bucket)
      $descriptor->addField($f);

      // required  key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:key)
      $descriptor->addField($f);

      // optional  r = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "r";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:r)
      $descriptor->addField($f);

      // optional  pr = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pr";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:pr)
      $descriptor->addField($f);

      // optional  basic_quorum = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "basic_quorum";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:basic_quorum)
      $descriptor->addField($f);

      // optional  notfound_ok = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "notfound_ok";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:notfound_ok)
      $descriptor->addField($f);

      // optional  if_modified = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "if_modified";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:if_modified)
      $descriptor->addField($f);

      // optional  head = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "head";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:head)
      $descriptor->addField($f);

      // optional  deletedvclock = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "deletedvclock";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetReq:deletedvclock)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $r = null;
    
    /**  @var int */
    public $pr = null;
    
    /**  @var boolean */
    public $basic_quorum = null;
    
    /**  @var boolean */
    public $notfound_ok = null;
    
    /**  @var string */
    public $if_modified = null;
    
    /**  @var boolean */
    public $head = null;
    
    /**  @var boolean */
    public $deletedvclock = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(3);
    }
    
    /**
     * Clear <r> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearR(){
      return $this->_clear(3);
    }
    
    /**
     * Get <r> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(3);
    }
    
    /**
     * Set <r> value
     *
     * @param int $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setR( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pr> has a value
     *
     * @return boolean
     */
    public function hasPr(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pr> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearPr(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pr> value
     *
     * @return int
     */
    public function getPr(){
      return $this->_get(4);
    }
    
    /**
     * Set <pr> value
     *
     * @param int $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setPr( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <basic_quorum> has a value
     *
     * @return boolean
     */
    public function hasBasicQuorum(){
      return $this->_has(5);
    }
    
    /**
     * Clear <basic_quorum> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearBasicQuorum(){
      return $this->_clear(5);
    }
    
    /**
     * Get <basic_quorum> value
     *
     * @return boolean
     */
    public function getBasicQuorum(){
      return $this->_get(5);
    }
    
    /**
     * Set <basic_quorum> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setBasicQuorum( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <notfound_ok> has a value
     *
     * @return boolean
     */
    public function hasNotfoundOk(){
      return $this->_has(6);
    }
    
    /**
     * Clear <notfound_ok> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearNotfoundOk(){
      return $this->_clear(6);
    }
    
    /**
     * Get <notfound_ok> value
     *
     * @return boolean
     */
    public function getNotfoundOk(){
      return $this->_get(6);
    }
    
    /**
     * Set <notfound_ok> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setNotfoundOk( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <if_modified> has a value
     *
     * @return boolean
     */
    public function hasIfModified(){
      return $this->_has(7);
    }
    
    /**
     * Clear <if_modified> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearIfModified(){
      return $this->_clear(7);
    }
    
    /**
     * Get <if_modified> value
     *
     * @return string
     */
    public function getIfModified(){
      return $this->_get(7);
    }
    
    /**
     * Set <if_modified> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setIfModified( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <head> has a value
     *
     * @return boolean
     */
    public function hasHead(){
      return $this->_has(8);
    }
    
    /**
     * Clear <head> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearHead(){
      return $this->_clear(8);
    }
    
    /**
     * Get <head> value
     *
     * @return boolean
     */
    public function getHead(){
      return $this->_get(8);
    }
    
    /**
     * Set <head> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setHead( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <deletedvclock> has a value
     *
     * @return boolean
     */
    public function hasDeletedvclock(){
      return $this->_has(9);
    }
    
    /**
     * Clear <deletedvclock> value
     *
     * @return \Riak\DrSLump\GetReq
     */
    public function clearDeletedvclock(){
      return $this->_clear(9);
    }
    
    /**
     * Get <deletedvclock> value
     *
     * @return boolean
     */
    public function getDeletedvclock(){
      return $this->_get(9);
    }
    
    /**
     * Set <deletedvclock> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\GetReq
     */
    public function setDeletedvclock( $value){
      return $this->_set(9, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetResp');

      // repeated .Riak.DrSLump.Content content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\Riak\DrSLump\Content';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetResp:content)
      $descriptor->addField($f);

      // optional  vclock = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vclock";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetResp:vclock)
      $descriptor->addField($f);

      // optional  unchanged = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unchanged";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetResp:unchanged)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetResp)

      return $descriptor;
    }

    /**  @var \Riak\DrSLump\Content[]  */
    public $content = array();
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var boolean */
    public $unchanged = null;
    

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \Riak\DrSLump\GetResp
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @param int $idx
     * @return \Riak\DrSLump\Content
     */
    public function getContent($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <content> value
     *
     * @param \Riak\DrSLump\Content $value
     * @return \Riak\DrSLump\GetResp
     */
    public function setContent(\Riak\DrSLump\Content $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <content>
     *
     * @return \Riak\DrSLump\Content[]
     */
    public function getContentList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <content>
     *
     * @param \Riak\DrSLump\Content $value
     * @return \Riak\DrSLump\GetResp
     */
    public function addContent(\Riak\DrSLump\Content $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \Riak\DrSLump\GetResp
     */
    public function clearVclock(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(2);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetResp
     */
    public function setVclock( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unchanged> has a value
     *
     * @return boolean
     */
    public function hasUnchanged(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unchanged> value
     *
     * @return \Riak\DrSLump\GetResp
     */
    public function clearUnchanged(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unchanged> value
     *
     * @return boolean
     */
    public function getUnchanged(){
      return $this->_get(3);
    }
    
    /**
     * Set <unchanged> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\GetResp
     */
    public function setUnchanged( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class PutReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\PutReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:bucket)
      $descriptor->addField($f);

      // optional  key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:key)
      $descriptor->addField($f);

      // optional  vclock = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "vclock";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:vclock)
      $descriptor->addField($f);

      // required .Riak.DrSLump.Content content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = 11;
      $f->rule      = 2;
      $f->reference = '\Riak\DrSLump\Content';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:content)
      $descriptor->addField($f);

      // optional  w = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "w";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:w)
      $descriptor->addField($f);

      // optional  dw = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "dw";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:dw)
      $descriptor->addField($f);

      // optional  return_body = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "return_body";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:return_body)
      $descriptor->addField($f);

      // optional  pw = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "pw";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:pw)
      $descriptor->addField($f);

      // optional  if_not_modified = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "if_not_modified";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:if_not_modified)
      $descriptor->addField($f);

      // optional  if_none_match = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "if_none_match";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:if_none_match)
      $descriptor->addField($f);

      // optional  return_head = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "return_head";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutReq:return_head)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.PutReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var \Riak\DrSLump\Content */
    public $content = null;
    
    /**  @var int */
    public $w = null;
    
    /**  @var int */
    public $dw = null;
    
    /**  @var boolean */
    public $return_body = null;
    
    /**  @var int */
    public $pw = null;
    
    /**  @var boolean */
    public $if_not_modified = null;
    
    /**  @var boolean */
    public $if_none_match = null;
    
    /**  @var boolean */
    public $return_head = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(3);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearVclock(){
      return $this->_clear(3);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(3);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setVclock( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param \Riak\DrSLump\Content $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setContent(\Riak\DrSLump\Content $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <w> has a value
     *
     * @return boolean
     */
    public function hasW(){
      return $this->_has(5);
    }
    
    /**
     * Clear <w> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearW(){
      return $this->_clear(5);
    }
    
    /**
     * Get <w> value
     *
     * @return int
     */
    public function getW(){
      return $this->_get(5);
    }
    
    /**
     * Set <w> value
     *
     * @param int $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setW( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <dw> has a value
     *
     * @return boolean
     */
    public function hasDw(){
      return $this->_has(6);
    }
    
    /**
     * Clear <dw> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearDw(){
      return $this->_clear(6);
    }
    
    /**
     * Get <dw> value
     *
     * @return int
     */
    public function getDw(){
      return $this->_get(6);
    }
    
    /**
     * Set <dw> value
     *
     * @param int $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setDw( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <return_body> has a value
     *
     * @return boolean
     */
    public function hasReturnBody(){
      return $this->_has(7);
    }
    
    /**
     * Clear <return_body> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearReturnBody(){
      return $this->_clear(7);
    }
    
    /**
     * Get <return_body> value
     *
     * @return boolean
     */
    public function getReturnBody(){
      return $this->_get(7);
    }
    
    /**
     * Set <return_body> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setReturnBody( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <pw> has a value
     *
     * @return boolean
     */
    public function hasPw(){
      return $this->_has(8);
    }
    
    /**
     * Clear <pw> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearPw(){
      return $this->_clear(8);
    }
    
    /**
     * Get <pw> value
     *
     * @return int
     */
    public function getPw(){
      return $this->_get(8);
    }
    
    /**
     * Set <pw> value
     *
     * @param int $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setPw( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <if_not_modified> has a value
     *
     * @return boolean
     */
    public function hasIfNotModified(){
      return $this->_has(9);
    }
    
    /**
     * Clear <if_not_modified> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearIfNotModified(){
      return $this->_clear(9);
    }
    
    /**
     * Get <if_not_modified> value
     *
     * @return boolean
     */
    public function getIfNotModified(){
      return $this->_get(9);
    }
    
    /**
     * Set <if_not_modified> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setIfNotModified( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <if_none_match> has a value
     *
     * @return boolean
     */
    public function hasIfNoneMatch(){
      return $this->_has(10);
    }
    
    /**
     * Clear <if_none_match> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearIfNoneMatch(){
      return $this->_clear(10);
    }
    
    /**
     * Get <if_none_match> value
     *
     * @return boolean
     */
    public function getIfNoneMatch(){
      return $this->_get(10);
    }
    
    /**
     * Set <if_none_match> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setIfNoneMatch( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <return_head> has a value
     *
     * @return boolean
     */
    public function hasReturnHead(){
      return $this->_has(11);
    }
    
    /**
     * Clear <return_head> value
     *
     * @return \Riak\DrSLump\PutReq
     */
    public function clearReturnHead(){
      return $this->_clear(11);
    }
    
    /**
     * Get <return_head> value
     *
     * @return boolean
     */
    public function getReturnHead(){
      return $this->_get(11);
    }
    
    /**
     * Set <return_head> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\PutReq
     */
    public function setReturnHead( $value){
      return $this->_set(11, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.PutReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class PutResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\PutResp');

      // repeated .Riak.DrSLump.Content content = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "content";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\Riak\DrSLump\Content';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutResp:content)
      $descriptor->addField($f);

      // optional  vclock = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "vclock";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutResp:vclock)
      $descriptor->addField($f);

      // optional  key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.PutResp:key)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.PutResp)

      return $descriptor;
    }

    /**  @var \Riak\DrSLump\Content[]  */
    public $content = array();
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var string */
    public $key = null;
    

    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <content> value
     *
     * @return \Riak\DrSLump\PutResp
     */
    public function clearContent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <content> value
     *
     * @param int $idx
     * @return \Riak\DrSLump\Content
     */
    public function getContent($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <content> value
     *
     * @param \Riak\DrSLump\Content $value
     * @return \Riak\DrSLump\PutResp
     */
    public function setContent(\Riak\DrSLump\Content $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <content>
     *
     * @return \Riak\DrSLump\Content[]
     */
    public function getContentList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <content>
     *
     * @param \Riak\DrSLump\Content $value
     * @return \Riak\DrSLump\PutResp
     */
    public function addContent(\Riak\DrSLump\Content $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(2);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \Riak\DrSLump\PutResp
     */
    public function clearVclock(){
      return $this->_clear(2);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(2);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \Riak\DrSLump\PutResp
     */
    public function setVclock( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(3);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\PutResp
     */
    public function clearKey(){
      return $this->_clear(3);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(3);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\PutResp
     */
    public function setKey( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.PutResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class DelReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\DelReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:bucket)
      $descriptor->addField($f);

      // required  key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:key)
      $descriptor->addField($f);

      // optional  rw = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rw";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:rw)
      $descriptor->addField($f);

      // optional  vclock = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "vclock";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:vclock)
      $descriptor->addField($f);

      // optional  r = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "r";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:r)
      $descriptor->addField($f);

      // optional  w = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "w";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:w)
      $descriptor->addField($f);

      // optional  pr = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "pr";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:pr)
      $descriptor->addField($f);

      // optional  pw = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "pw";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:pw)
      $descriptor->addField($f);

      // optional  dw = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "dw";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.DelReq:dw)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.DelReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var int */
    public $rw = null;
    
    /**  @var string */
    public $vclock = null;
    
    /**  @var int */
    public $r = null;
    
    /**  @var int */
    public $w = null;
    
    /**  @var int */
    public $pr = null;
    
    /**  @var int */
    public $pw = null;
    
    /**  @var int */
    public $dw = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rw> has a value
     *
     * @return boolean
     */
    public function hasRw(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rw> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearRw(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rw> value
     *
     * @return int
     */
    public function getRw(){
      return $this->_get(3);
    }
    
    /**
     * Set <rw> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setRw( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <vclock> has a value
     *
     * @return boolean
     */
    public function hasVclock(){
      return $this->_has(4);
    }
    
    /**
     * Clear <vclock> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearVclock(){
      return $this->_clear(4);
    }
    
    /**
     * Get <vclock> value
     *
     * @return string
     */
    public function getVclock(){
      return $this->_get(4);
    }
    
    /**
     * Set <vclock> value
     *
     * @param string $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setVclock( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <r> has a value
     *
     * @return boolean
     */
    public function hasR(){
      return $this->_has(5);
    }
    
    /**
     * Clear <r> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearR(){
      return $this->_clear(5);
    }
    
    /**
     * Get <r> value
     *
     * @return int
     */
    public function getR(){
      return $this->_get(5);
    }
    
    /**
     * Set <r> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setR( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <w> has a value
     *
     * @return boolean
     */
    public function hasW(){
      return $this->_has(6);
    }
    
    /**
     * Clear <w> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearW(){
      return $this->_clear(6);
    }
    
    /**
     * Get <w> value
     *
     * @return int
     */
    public function getW(){
      return $this->_get(6);
    }
    
    /**
     * Set <w> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setW( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <pr> has a value
     *
     * @return boolean
     */
    public function hasPr(){
      return $this->_has(7);
    }
    
    /**
     * Clear <pr> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearPr(){
      return $this->_clear(7);
    }
    
    /**
     * Get <pr> value
     *
     * @return int
     */
    public function getPr(){
      return $this->_get(7);
    }
    
    /**
     * Set <pr> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setPr( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <pw> has a value
     *
     * @return boolean
     */
    public function hasPw(){
      return $this->_has(8);
    }
    
    /**
     * Clear <pw> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearPw(){
      return $this->_clear(8);
    }
    
    /**
     * Get <pw> value
     *
     * @return int
     */
    public function getPw(){
      return $this->_get(8);
    }
    
    /**
     * Set <pw> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setPw( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <dw> has a value
     *
     * @return boolean
     */
    public function hasDw(){
      return $this->_has(9);
    }
    
    /**
     * Clear <dw> value
     *
     * @return \Riak\DrSLump\DelReq
     */
    public function clearDw(){
      return $this->_clear(9);
    }
    
    /**
     * Get <dw> value
     *
     * @return int
     */
    public function getDw(){
      return $this->_get(9);
    }
    
    /**
     * Set <dw> value
     *
     * @param int $value
     * @return \Riak\DrSLump\DelReq
     */
    public function setDw( $value){
      return $this->_set(9, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.DelReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class DelResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\DelResp');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.DelResp)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.DelResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class ListBucketsReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\ListBucketsReq');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.ListBucketsReq)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.ListBucketsReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class ListBucketsResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\ListBucketsResp');

      // repeated  buckets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "buckets";
      $f->type      = 12;
      $f->rule      = 3;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ListBucketsResp:buckets)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.ListBucketsResp)

      return $descriptor;
    }

    /**  @var string[]  */
    public $buckets = array();
    

    /**
     * Check if <buckets> has a value
     *
     * @return boolean
     */
    public function hasBuckets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <buckets> value
     *
     * @return \Riak\DrSLump\ListBucketsResp
     */
    public function clearBuckets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <buckets> value
     *
     * @param int $idx
     * @return string
     */
    public function getBuckets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <buckets> value
     *
     * @param string $value
     * @return \Riak\DrSLump\ListBucketsResp
     */
    public function setBuckets( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <buckets>
     *
     * @return string[]
     */
    public function getBucketsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <buckets>
     *
     * @param string $value
     * @return \Riak\DrSLump\ListBucketsResp
     */
    public function addBuckets( $value){
     return $this->_add(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.ListBucketsResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class ListKeysReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\ListKeysReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ListKeysReq:bucket)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.ListKeysReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\ListKeysReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\ListKeysReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.ListKeysReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class ListKeysResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\ListKeysResp');

      // repeated  keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = 12;
      $f->rule      = 3;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ListKeysResp:keys)
      $descriptor->addField($f);

      // optional  done = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "done";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.ListKeysResp:done)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.ListKeysResp)

      return $descriptor;
    }

    /**  @var string[]  */
    public $keys = array();
    
    /**  @var boolean */
    public $done = null;
    

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \Riak\DrSLump\ListKeysResp
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param string $value
     * @return \Riak\DrSLump\ListKeysResp
     */
    public function setKeys( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return string[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param string $value
     * @return \Riak\DrSLump\ListKeysResp
     */
    public function addKeys( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <done> has a value
     *
     * @return boolean
     */
    public function hasDone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <done> value
     *
     * @return \Riak\DrSLump\ListKeysResp
     */
    public function clearDone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <done> value
     *
     * @return boolean
     */
    public function getDone(){
      return $this->_get(2);
    }
    
    /**
     * Set <done> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\ListKeysResp
     */
    public function setDone( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.ListKeysResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetBucketReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetBucketReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetBucketReq:bucket)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetBucketReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\GetBucketReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\GetBucketReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetBucketReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class GetBucketResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\GetBucketResp');

      // required .Riak.DrSLump.BucketProps props = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "props";
      $f->type      = 11;
      $f->rule      = 2;
      $f->reference = '\Riak\DrSLump\BucketProps';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.GetBucketResp:props)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.GetBucketResp)

      return $descriptor;
    }

    /**  @var \Riak\DrSLump\BucketProps */
    public $props = null;
    

    /**
     * Check if <props> has a value
     *
     * @return boolean
     */
    public function hasProps(){
      return $this->_has(1);
    }
    
    /**
     * Clear <props> value
     *
     * @return \Riak\DrSLump\GetBucketResp
     */
    public function clearProps(){
      return $this->_clear(1);
    }
    
    /**
     * Get <props> value
     *
     * @return \Riak\DrSLump\BucketProps
     */
    public function getProps(){
      return $this->_get(1);
    }
    
    /**
     * Set <props> value
     *
     * @param \Riak\DrSLump\BucketProps $value
     * @return \Riak\DrSLump\GetBucketResp
     */
    public function setProps(\Riak\DrSLump\BucketProps $value){
      return $this->_set(1, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.GetBucketResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class SetBucketReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\SetBucketReq');

      // required  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.SetBucketReq:bucket)
      $descriptor->addField($f);

      // required .Riak.DrSLump.BucketProps props = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "props";
      $f->type      = 11;
      $f->rule      = 2;
      $f->reference = '\Riak\DrSLump\BucketProps';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.SetBucketReq:props)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.SetBucketReq)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    
    /**  @var \Riak\DrSLump\BucketProps */
    public $props = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\SetBucketReq
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\SetBucketReq
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <props> has a value
     *
     * @return boolean
     */
    public function hasProps(){
      return $this->_has(2);
    }
    
    /**
     * Clear <props> value
     *
     * @return \Riak\DrSLump\SetBucketReq
     */
    public function clearProps(){
      return $this->_clear(2);
    }
    
    /**
     * Get <props> value
     *
     * @return \Riak\DrSLump\BucketProps
     */
    public function getProps(){
      return $this->_get(2);
    }
    
    /**
     * Set <props> value
     *
     * @param \Riak\DrSLump\BucketProps $value
     * @return \Riak\DrSLump\SetBucketReq
     */
    public function setProps(\Riak\DrSLump\BucketProps $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.SetBucketReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class SetBucketResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\SetBucketResp');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.SetBucketResp)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.SetBucketResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class MapRedReq extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\MapRedReq');

      // required  request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "request";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.MapRedReq:request)
      $descriptor->addField($f);

      // required  content_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content_type";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.MapRedReq:content_type)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.MapRedReq)

      return $descriptor;
    }

    /**  @var string */
    public $request = null;
    
    /**  @var string */
    public $content_type = null;
    

    /**
     * Check if <request> has a value
     *
     * @return boolean
     */
    public function hasRequest(){
      return $this->_has(1);
    }
    
    /**
     * Clear <request> value
     *
     * @return \Riak\DrSLump\MapRedReq
     */
    public function clearRequest(){
      return $this->_clear(1);
    }
    
    /**
     * Get <request> value
     *
     * @return string
     */
    public function getRequest(){
      return $this->_get(1);
    }
    
    /**
     * Set <request> value
     *
     * @param string $value
     * @return \Riak\DrSLump\MapRedReq
     */
    public function setRequest( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content_type> has a value
     *
     * @return boolean
     */
    public function hasContentType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content_type> value
     *
     * @return \Riak\DrSLump\MapRedReq
     */
    public function clearContentType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content_type> value
     *
     * @return string
     */
    public function getContentType(){
      return $this->_get(2);
    }
    
    /**
     * Set <content_type> value
     *
     * @param string $value
     * @return \Riak\DrSLump\MapRedReq
     */
    public function setContentType( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.MapRedReq)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class MapRedResp extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\MapRedResp');

      // optional  phase = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "phase";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.MapRedResp:phase)
      $descriptor->addField($f);

      // optional  response = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "response";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.MapRedResp:response)
      $descriptor->addField($f);

      // optional  done = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "done";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.MapRedResp:done)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.MapRedResp)

      return $descriptor;
    }

    /**  @var int */
    public $phase = null;
    
    /**  @var string */
    public $response = null;
    
    /**  @var boolean */
    public $done = null;
    

    /**
     * Check if <phase> has a value
     *
     * @return boolean
     */
    public function hasPhase(){
      return $this->_has(1);
    }
    
    /**
     * Clear <phase> value
     *
     * @return \Riak\DrSLump\MapRedResp
     */
    public function clearPhase(){
      return $this->_clear(1);
    }
    
    /**
     * Get <phase> value
     *
     * @return int
     */
    public function getPhase(){
      return $this->_get(1);
    }
    
    /**
     * Set <phase> value
     *
     * @param int $value
     * @return \Riak\DrSLump\MapRedResp
     */
    public function setPhase( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <response> has a value
     *
     * @return boolean
     */
    public function hasResponse(){
      return $this->_has(2);
    }
    
    /**
     * Clear <response> value
     *
     * @return \Riak\DrSLump\MapRedResp
     */
    public function clearResponse(){
      return $this->_clear(2);
    }
    
    /**
     * Get <response> value
     *
     * @return string
     */
    public function getResponse(){
      return $this->_get(2);
    }
    
    /**
     * Set <response> value
     *
     * @param string $value
     * @return \Riak\DrSLump\MapRedResp
     */
    public function setResponse( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <done> has a value
     *
     * @return boolean
     */
    public function hasDone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <done> value
     *
     * @return \Riak\DrSLump\MapRedResp
     */
    public function clearDone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <done> value
     *
     * @return boolean
     */
    public function getDone(){
      return $this->_get(3);
    }
    
    /**
     * Set <done> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\MapRedResp
     */
    public function setDone( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.MapRedResp)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class Content extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\Content');

      // required  value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:value)
      $descriptor->addField($f);

      // optional  content_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "content_type";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:content_type)
      $descriptor->addField($f);

      // optional  charset = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "charset";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:charset)
      $descriptor->addField($f);

      // optional  content_encoding = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content_encoding";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:content_encoding)
      $descriptor->addField($f);

      // optional  vtag = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "vtag";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:vtag)
      $descriptor->addField($f);

      // repeated .Riak.DrSLump.Link links = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "links";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\Riak\DrSLump\Link';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:links)
      $descriptor->addField($f);

      // optional  last_mod = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "last_mod";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:last_mod)
      $descriptor->addField($f);

      // optional  last_mod_usecs = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "last_mod_usecs";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:last_mod_usecs)
      $descriptor->addField($f);

      // repeated .Riak.DrSLump.Pair usermeta = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "usermeta";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\Riak\DrSLump\Pair';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:usermeta)
      $descriptor->addField($f);

      // repeated .Riak.DrSLump.Pair indexes = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "indexes";
      $f->type      = 11;
      $f->rule      = 3;
      $f->reference = '\Riak\DrSLump\Pair';
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Content:indexes)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.Content)

      return $descriptor;
    }

    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $content_type = null;
    
    /**  @var string */
    public $charset = null;
    
    /**  @var string */
    public $content_encoding = null;
    
    /**  @var string */
    public $vtag = null;
    
    /**  @var \Riak\DrSLump\Link[]  */
    public $links = array();
    
    /**  @var int */
    public $last_mod = null;
    
    /**  @var int */
    public $last_mod_usecs = null;
    
    /**  @var \Riak\DrSLump\Pair[]  */
    public $usermeta = array();
    
    /**  @var \Riak\DrSLump\Pair[]  */
    public $indexes = array();
    

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Content
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <content_type> has a value
     *
     * @return boolean
     */
    public function hasContentType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <content_type> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearContentType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <content_type> value
     *
     * @return string
     */
    public function getContentType(){
      return $this->_get(2);
    }
    
    /**
     * Set <content_type> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Content
     */
    public function setContentType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <charset> has a value
     *
     * @return boolean
     */
    public function hasCharset(){
      return $this->_has(3);
    }
    
    /**
     * Clear <charset> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearCharset(){
      return $this->_clear(3);
    }
    
    /**
     * Get <charset> value
     *
     * @return string
     */
    public function getCharset(){
      return $this->_get(3);
    }
    
    /**
     * Set <charset> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Content
     */
    public function setCharset( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content_encoding> has a value
     *
     * @return boolean
     */
    public function hasContentEncoding(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content_encoding> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearContentEncoding(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content_encoding> value
     *
     * @return string
     */
    public function getContentEncoding(){
      return $this->_get(4);
    }
    
    /**
     * Set <content_encoding> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Content
     */
    public function setContentEncoding( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <vtag> has a value
     *
     * @return boolean
     */
    public function hasVtag(){
      return $this->_has(5);
    }
    
    /**
     * Clear <vtag> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearVtag(){
      return $this->_clear(5);
    }
    
    /**
     * Get <vtag> value
     *
     * @return string
     */
    public function getVtag(){
      return $this->_get(5);
    }
    
    /**
     * Set <vtag> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Content
     */
    public function setVtag( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(6);
    }
    
    /**
     * Clear <links> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearLinks(){
      return $this->_clear(6);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \Riak\DrSLump\Link
     */
    public function getLinks($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \Riak\DrSLump\Link $value
     * @return \Riak\DrSLump\Content
     */
    public function setLinks(\Riak\DrSLump\Link $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \Riak\DrSLump\Link[]
     */
    public function getLinksList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \Riak\DrSLump\Link $value
     * @return \Riak\DrSLump\Content
     */
    public function addLinks(\Riak\DrSLump\Link $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <last_mod> has a value
     *
     * @return boolean
     */
    public function hasLastMod(){
      return $this->_has(7);
    }
    
    /**
     * Clear <last_mod> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearLastMod(){
      return $this->_clear(7);
    }
    
    /**
     * Get <last_mod> value
     *
     * @return int
     */
    public function getLastMod(){
      return $this->_get(7);
    }
    
    /**
     * Set <last_mod> value
     *
     * @param int $value
     * @return \Riak\DrSLump\Content
     */
    public function setLastMod( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <last_mod_usecs> has a value
     *
     * @return boolean
     */
    public function hasLastModUsecs(){
      return $this->_has(8);
    }
    
    /**
     * Clear <last_mod_usecs> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearLastModUsecs(){
      return $this->_clear(8);
    }
    
    /**
     * Get <last_mod_usecs> value
     *
     * @return int
     */
    public function getLastModUsecs(){
      return $this->_get(8);
    }
    
    /**
     * Set <last_mod_usecs> value
     *
     * @param int $value
     * @return \Riak\DrSLump\Content
     */
    public function setLastModUsecs( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <usermeta> has a value
     *
     * @return boolean
     */
    public function hasUsermeta(){
      return $this->_has(9);
    }
    
    /**
     * Clear <usermeta> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearUsermeta(){
      return $this->_clear(9);
    }
    
    /**
     * Get <usermeta> value
     *
     * @param int $idx
     * @return \Riak\DrSLump\Pair
     */
    public function getUsermeta($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <usermeta> value
     *
     * @param \Riak\DrSLump\Pair $value
     * @return \Riak\DrSLump\Content
     */
    public function setUsermeta(\Riak\DrSLump\Pair $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <usermeta>
     *
     * @return \Riak\DrSLump\Pair[]
     */
    public function getUsermetaList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <usermeta>
     *
     * @param \Riak\DrSLump\Pair $value
     * @return \Riak\DrSLump\Content
     */
    public function addUsermeta(\Riak\DrSLump\Pair $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <indexes> has a value
     *
     * @return boolean
     */
    public function hasIndexes(){
      return $this->_has(10);
    }
    
    /**
     * Clear <indexes> value
     *
     * @return \Riak\DrSLump\Content
     */
    public function clearIndexes(){
      return $this->_clear(10);
    }
    
    /**
     * Get <indexes> value
     *
     * @param int $idx
     * @return \Riak\DrSLump\Pair
     */
    public function getIndexes($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <indexes> value
     *
     * @param \Riak\DrSLump\Pair $value
     * @return \Riak\DrSLump\Content
     */
    public function setIndexes(\Riak\DrSLump\Pair $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <indexes>
     *
     * @return \Riak\DrSLump\Pair[]
     */
    public function getIndexesList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <indexes>
     *
     * @param \Riak\DrSLump\Pair $value
     * @return \Riak\DrSLump\Content
     */
    public function addIndexes(\Riak\DrSLump\Pair $value){
     return $this->_add(10, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.Content)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class Pair extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\Pair');

      // required  key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 2;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Pair:key)
      $descriptor->addField($f);

      // optional  value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Pair:value)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.Pair)

      return $descriptor;
    }

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\Pair
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Pair
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \Riak\DrSLump\Pair
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Pair
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.Pair)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class Link extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\Link');

      // optional  bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Link:bucket)
      $descriptor->addField($f);

      // optional  key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Link:key)
      $descriptor->addField($f);

      // optional  tag = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "tag";
      $f->type      = 12;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.Link:tag)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.Link)

      return $descriptor;
    }

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $tag = null;
    

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \Riak\DrSLump\Link
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Link
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key> value
     *
     * @return \Riak\DrSLump\Link
     */
    public function clearKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Link
     */
    public function setKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tag> has a value
     *
     * @return boolean
     */
    public function hasTag(){
      return $this->_has(3);
    }
    
    /**
     * Clear <tag> value
     *
     * @return \Riak\DrSLump\Link
     */
    public function clearTag(){
      return $this->_clear(3);
    }
    
    /**
     * Get <tag> value
     *
     * @return string
     */
    public function getTag(){
      return $this->_get(3);
    }
    
    /**
     * Set <tag> value
     *
     * @param string $value
     * @return \Riak\DrSLump\Link
     */
    public function setTag( $value){
      return $this->_set(3, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.Link)
  }
}

namespace Riak\DrSLump {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak.DrSLump)

  class BucketProps extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump\BucketProps');

      // optional  n_val = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "n_val";
      $f->type      = 13;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.BucketProps:n_val)
      $descriptor->addField($f);

      // optional  allow_mult = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allow_mult";
      $f->type      = 8;
      $f->rule      = 1;
      // @@protoc_insertion_point(scope_field)
      // @@protoc_insertion_point(field_Riak.DrSLump.BucketProps:allow_mult)
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump.BucketProps)

      return $descriptor;
    }

    /**  @var int */
    public $n_val = null;
    
    /**  @var boolean */
    public $allow_mult = null;
    

    /**
     * Check if <n_val> has a value
     *
     * @return boolean
     */
    public function hasNVal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <n_val> value
     *
     * @return \Riak\DrSLump\BucketProps
     */
    public function clearNVal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <n_val> value
     *
     * @return int
     */
    public function getNVal(){
      return $this->_get(1);
    }
    
    /**
     * Set <n_val> value
     *
     * @param int $value
     * @return \Riak\DrSLump\BucketProps
     */
    public function setNVal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <allow_mult> has a value
     *
     * @return boolean
     */
    public function hasAllowMult(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allow_mult> value
     *
     * @return \Riak\DrSLump\BucketProps
     */
    public function clearAllowMult(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allow_mult> value
     *
     * @return boolean
     */
    public function getAllowMult(){
      return $this->_get(2);
    }
    
    /**
     * Set <allow_mult> value
     *
     * @param boolean $value
     * @return \Riak\DrSLump\BucketProps
     */
    public function setAllowMult( $value){
      return $this->_set(2, $value);
    }
    

    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump.BucketProps)
  }
}

namespace Riak {

  // @@protoc_insertion_point(scope_namespace)
  // @@protoc_insertion_point(namespace_Riak)

  class DrSLump extends \DrSlump\Protobuf\Message {

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor('\Riak\DrSLump');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      // @@protoc_insertion_point(scope_descriptor)
      // @@protoc_insertion_point(descriptor_Riak.DrSLump)

      return $descriptor;
    }



    // @@protoc_insertion_point(scope_class)
    // @@protoc_insertion_point(class_Riak.DrSLump)
  }
}

