<?php
// DO NOT EDIT! Generated by Protobuf for PHP protoc plugin 0.9.3
// Source: descriptor.proto
//   Date: 2011-03-20 01:26:49

namespace google\protobuf {

  class FileDescriptorSet extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\FileDescriptorSet");

        // repeated .google.protobuf.FileDescriptorProto file = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "file";
        $f->nameOrig  = "file";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\FileDescriptorProto";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\FileDescriptorProto[] */
    public $file = array();
    

    /**
     * Check if <file> has a value
     *
     * @return boolean
     */
    public function hasFile(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file> value
     *
     * @return \google\protobuf\FileDescriptorSet
     */
    public function clearFile(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file> value
     *
     * @param int $idx
     * @return \google\protobuf\FileDescriptorProto
     */
    public function getFile($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <file> value
     *
     * @param \google\protobuf\FileDescriptorProto $value
     * @return \google\protobuf\FileDescriptorSet
     */
    public function setFile(\google\protobuf\FileDescriptorProto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <file>
     *
     * @return \google\protobuf\FileDescriptorProto[]
     */
    public function getFileList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <file>
     *
     * @param \google\protobuf\FileDescriptorProto $value
     * @return \google\protobuf\FileDescriptorSet
     */
    public function addFile(\google\protobuf\FileDescriptorProto $value){
     return $this->_add(1, $value);
    }
    
  }
}

namespace google\protobuf {

  class FileDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\FileDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  package = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "package";
        $f->nameOrig  = "package";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // repeated  dependency = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "dependency";
        $f->nameOrig  = "dependency";
        $f->type      = 9;
        $f->rule      = 3;
        $descriptor->addField($f);

        // repeated .google.protobuf.DescriptorProto message_type = 4
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 4;
        $f->name      = "message_type";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\DescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.EnumDescriptorProto enum_type = 5
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 5;
        $f->name      = "enum_type";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\EnumDescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.ServiceDescriptorProto service = 6
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 6;
        $f->name      = "service";
        $f->nameOrig  = "service";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\ServiceDescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.FieldDescriptorProto extension = 7
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 7;
        $f->name      = "extension";
        $f->nameOrig  = "extension";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\FieldDescriptorProto";
        $descriptor->addField($f);

        // optional .google.protobuf.FileOptions options = 8
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 8;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FileOptions";
        $descriptor->addField($f);

        // optional .google.protobuf.SourceCodeInfo source_code_info = 9
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 9;
        $f->name      = "source_code_info";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\SourceCodeInfo";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var string */
    public $package = null;
    
    /** @var string[] */
    public $dependency = array();
    
    /** @var \google\protobuf\DescriptorProto[] */
    public $message_type = array();
    
    /** @var \google\protobuf\EnumDescriptorProto[] */
    public $enum_type = array();
    
    /** @var \google\protobuf\ServiceDescriptorProto[] */
    public $service = array();
    
    /** @var \google\protobuf\FieldDescriptorProto[] */
    public $extension = array();
    
    /** @var \google\protobuf\FileOptions */
    public $options = null;
    
    /** @var \google\protobuf\SourceCodeInfo */
    public $source_code_info = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <package> has a value
     *
     * @return boolean
     */
    public function hasPackage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <package> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearPackage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <package> value
     *
     * @return string
     */
    public function getPackage(){
      return $this->_get(2);
    }
    
    /**
     * Set <package> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setPackage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dependency> has a value
     *
     * @return boolean
     */
    public function hasDependency(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dependency> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearDependency(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dependency> value
     *
     * @param int $idx
     * @return string
     */
    public function getDependency($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <dependency> value
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setDependency( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <dependency>
     *
     * @return string[]
     */
    public function getDependencyList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <dependency>
     *
     * @param string $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addDependency( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <message_type> has a value
     *
     * @return boolean
     */
    public function hasMessageType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <message_type> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearMessageType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <message_type> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto
     */
    public function getMessageType($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <message_type> value
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setMessageType(\google\protobuf\DescriptorProto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <message_type>
     *
     * @return \google\protobuf\DescriptorProto[]
     */
    public function getMessageTypeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <message_type>
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addMessageType(\google\protobuf\DescriptorProto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <enum_type> has a value
     *
     * @return boolean
     */
    public function hasEnumType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <enum_type> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearEnumType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <enum_type> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function getEnumType($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <enum_type> value
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setEnumType(\google\protobuf\EnumDescriptorProto $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <enum_type>
     *
     * @return \google\protobuf\EnumDescriptorProto[]
     */
    public function getEnumTypeList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <enum_type>
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addEnumType(\google\protobuf\EnumDescriptorProto $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(6);
    }
    
    /**
     * Clear <service> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearService(){
      return $this->_clear(6);
    }
    
    /**
     * Get <service> value
     *
     * @param int $idx
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function getService($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <service> value
     *
     * @param \google\protobuf\ServiceDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setService(\google\protobuf\ServiceDescriptorProto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <service>
     *
     * @return \google\protobuf\ServiceDescriptorProto[]
     */
    public function getServiceList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <service>
     *
     * @param \google\protobuf\ServiceDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addService(\google\protobuf\ServiceDescriptorProto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <extension> has a value
     *
     * @return boolean
     */
    public function hasExtension(){
      return $this->_has(7);
    }
    
    /**
     * Clear <extension> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearExtension(){
      return $this->_clear(7);
    }
    
    /**
     * Get <extension> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getExtension($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <extension> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setExtension(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <extension>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getExtensionList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <extension>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function addExtension(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function getOptions(){
      return $this->_get(8);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\FileOptions $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setOptions(\google\protobuf\FileOptions $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <source_code_info> has a value
     *
     * @return boolean
     */
    public function hasSourceCodeInfo(){
      return $this->_has(9);
    }
    
    /**
     * Clear <source_code_info> value
     *
     * @return \google\protobuf\FileDescriptorProto
     */
    public function clearSourceCodeInfo(){
      return $this->_clear(9);
    }
    
    /**
     * Get <source_code_info> value
     *
     * @return \google\protobuf\SourceCodeInfo
     */
    public function getSourceCodeInfo(){
      return $this->_get(9);
    }
    
    /**
     * Set <source_code_info> value
     *
     * @param \google\protobuf\SourceCodeInfo $value
     * @return \google\protobuf\FileDescriptorProto
     */
    public function setSourceCodeInfo(\google\protobuf\SourceCodeInfo $value){
      return $this->_set(9, $value);
    }
    
  }
}

namespace google\protobuf {

  class DescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\DescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // repeated .google.protobuf.FieldDescriptorProto field = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "field";
        $f->nameOrig  = "field";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\FieldDescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.FieldDescriptorProto extension = 6
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 6;
        $f->name      = "extension";
        $f->nameOrig  = "extension";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\FieldDescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.DescriptorProto nested_type = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "nested_type";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\DescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.EnumDescriptorProto enum_type = 4
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 4;
        $f->name      = "enum_type";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\EnumDescriptorProto";
        $descriptor->addField($f);

        // repeated .google.protobuf.DescriptorProto.ExtensionRange extension_range = 5
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 5;
        $f->name      = "extension_range";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\DescriptorProto\ExtensionRange";
        $descriptor->addField($f);

        // optional .google.protobuf.MessageOptions options = 7
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 7;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\MessageOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var \google\protobuf\FieldDescriptorProto[] */
    public $field = array();
    
    /** @var \google\protobuf\FieldDescriptorProto[] */
    public $extension = array();
    
    /** @var \google\protobuf\DescriptorProto[] */
    public $nested_type = array();
    
    /** @var \google\protobuf\EnumDescriptorProto[] */
    public $enum_type = array();
    
    /** @var \google\protobuf\DescriptorProto\ExtensionRange[] */
    public $extension_range = array();
    
    /** @var \google\protobuf\MessageOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }
    
    /**
     * Clear <field> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearField(){
      return $this->_clear(2);
    }
    
    /**
     * Get <field> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getField($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <field> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setField(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <field>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getFieldList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <field>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addField(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <extension> has a value
     *
     * @return boolean
     */
    public function hasExtension(){
      return $this->_has(6);
    }
    
    /**
     * Clear <extension> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearExtension(){
      return $this->_clear(6);
    }
    
    /**
     * Get <extension> value
     *
     * @param int $idx
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function getExtension($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <extension> value
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setExtension(\google\protobuf\FieldDescriptorProto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <extension>
     *
     * @return \google\protobuf\FieldDescriptorProto[]
     */
    public function getExtensionList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <extension>
     *
     * @param \google\protobuf\FieldDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addExtension(\google\protobuf\FieldDescriptorProto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <nested_type> has a value
     *
     * @return boolean
     */
    public function hasNestedType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <nested_type> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearNestedType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <nested_type> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto
     */
    public function getNestedType($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <nested_type> value
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setNestedType(\google\protobuf\DescriptorProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <nested_type>
     *
     * @return \google\protobuf\DescriptorProto[]
     */
    public function getNestedTypeList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <nested_type>
     *
     * @param \google\protobuf\DescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addNestedType(\google\protobuf\DescriptorProto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <enum_type> has a value
     *
     * @return boolean
     */
    public function hasEnumType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <enum_type> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearEnumType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <enum_type> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function getEnumType($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <enum_type> value
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setEnumType(\google\protobuf\EnumDescriptorProto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <enum_type>
     *
     * @return \google\protobuf\EnumDescriptorProto[]
     */
    public function getEnumTypeList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <enum_type>
     *
     * @param \google\protobuf\EnumDescriptorProto $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addEnumType(\google\protobuf\EnumDescriptorProto $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <extension_range> has a value
     *
     * @return boolean
     */
    public function hasExtensionRange(){
      return $this->_has(5);
    }
    
    /**
     * Clear <extension_range> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearExtensionRange(){
      return $this->_clear(5);
    }
    
    /**
     * Get <extension_range> value
     *
     * @param int $idx
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function getExtensionRange($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <extension_range> value
     *
     * @param \google\protobuf\DescriptorProto\ExtensionRange $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setExtensionRange(\google\protobuf\DescriptorProto\ExtensionRange $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <extension_range>
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange[]
     */
    public function getExtensionRangeList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <extension_range>
     *
     * @param \google\protobuf\DescriptorProto\ExtensionRange $value
     * @return \google\protobuf\DescriptorProto
     */
    public function addExtensionRange(\google\protobuf\DescriptorProto\ExtensionRange $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(7);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\DescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(7);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function getOptions(){
      return $this->_get(7);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\MessageOptions $value
     * @return \google\protobuf\DescriptorProto
     */
    public function setOptions(\google\protobuf\MessageOptions $value){
      return $this->_set(7, $value);
    }
    
  }
}

namespace google\protobuf\DescriptorProto {

  class ExtensionRange extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\DescriptorProto\ExtensionRange");

        // optional  start = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "start";
        $f->nameOrig  = "start";
        $f->type      = 5;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  end = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "end";
        $f->nameOrig  = "end";
        $f->type      = 5;
        $f->rule      = 1;
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var int */
    public $start = null;
    
    /** @var int */
    public $end = null;
    

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\protobuf\DescriptorProto\ExtensionRange
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
    
  }
}

namespace google\protobuf {

  class FieldDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\FieldDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  number = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "number";
        $f->nameOrig  = "number";
        $f->type      = 5;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional .google.protobuf.FieldDescriptorProto.Label label = 4
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 4;
        $f->name      = "label";
        $f->nameOrig  = "label";
        $f->type      = 14;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FieldDescriptorProto\Label";
        $descriptor->addField($f);

        // optional .google.protobuf.FieldDescriptorProto.Type type = 5
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 5;
        $f->name      = "type";
        $f->nameOrig  = "type";
        $f->type      = 14;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FieldDescriptorProto\Type";
        $descriptor->addField($f);

        // optional  type_name = 6
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 6;
        $f->name  = "type_name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  extendee = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "extendee";
        $f->nameOrig  = "extendee";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  default_value = 7
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 7;
        $f->name      = "default_value";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional .google.protobuf.FieldOptions options = 8
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 8;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FieldOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var int */
    public $number = null;
    
    /** @var int - \google\protobuf\FieldDescriptorProto\Label */
    public $label = null;
    
    /** @var int - \google\protobuf\FieldDescriptorProto\Type */
    public $type = null;
    
    /** @var string */
    public $type_name = null;
    
    /** @var string */
    public $extendee = null;
    
    /** @var string */
    public $default_value = null;
    
    /** @var \google\protobuf\FieldOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <label> has a value
     *
     * @return boolean
     */
    public function hasLabel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <label> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearLabel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <label> value
     *
     * @return int - \google\protobuf\FieldDescriptorProto\Label
     */
    public function getLabel(){
      return $this->_get(4);
    }
    
    /**
     * Set <label> value
     *
     * @param int - \google\protobuf\FieldDescriptorProto\Label $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setLabel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\protobuf\FieldDescriptorProto\Type
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\protobuf\FieldDescriptorProto\Type $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <type_name> has a value
     *
     * @return boolean
     */
    public function hasTypeName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <type_name> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearTypeName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <type_name> value
     *
     * @return string
     */
    public function getTypeName(){
      return $this->_get(6);
    }
    
    /**
     * Set <type_name> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setTypeName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <extendee> has a value
     *
     * @return boolean
     */
    public function hasExtendee(){
      return $this->_has(2);
    }
    
    /**
     * Clear <extendee> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearExtendee(){
      return $this->_clear(2);
    }
    
    /**
     * Get <extendee> value
     *
     * @return string
     */
    public function getExtendee(){
      return $this->_get(2);
    }
    
    /**
     * Set <extendee> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setExtendee( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <default_value> has a value
     *
     * @return boolean
     */
    public function hasDefaultValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <default_value> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearDefaultValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <default_value> value
     *
     * @return string
     */
    public function getDefaultValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <default_value> value
     *
     * @param string $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setDefaultValue( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function getOptions(){
      return $this->_get(8);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\FieldOptions $value
     * @return \google\protobuf\FieldDescriptorProto
     */
    public function setOptions(\google\protobuf\FieldOptions $value){
      return $this->_set(8, $value);
    }
    
  }
}

namespace google\protobuf\FieldDescriptorProto {

  class Type {
    const TYPE_DOUBLE = 1;
    const TYPE_FLOAT = 2;
    const TYPE_INT64 = 3;
    const TYPE_UINT64 = 4;
    const TYPE_INT32 = 5;
    const TYPE_FIXED64 = 6;
    const TYPE_FIXED32 = 7;
    const TYPE_BOOL = 8;
    const TYPE_STRING = 9;
    const TYPE_GROUP = 10;
    const TYPE_MESSAGE = 11;
    const TYPE_BYTES = 12;
    const TYPE_UINT32 = 13;
    const TYPE_ENUM = 14;
    const TYPE_SFIXED32 = 15;
    const TYPE_SFIXED64 = 16;
    const TYPE_SINT32 = 17;
    const TYPE_SINT64 = 18;
  }
}

namespace google\protobuf\FieldDescriptorProto {

  class Label {
    const LABEL_OPTIONAL = 1;
    const LABEL_REQUIRED = 2;
    const LABEL_REPEATED = 3;
  }
}

namespace google\protobuf {

  class EnumDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\EnumDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // repeated .google.protobuf.EnumValueDescriptorProto value = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "value";
        $f->nameOrig  = "value";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\EnumValueDescriptorProto";
        $descriptor->addField($f);

        // optional .google.protobuf.EnumOptions options = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\EnumOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var \google\protobuf\EnumValueDescriptorProto[] */
    public $value = array();
    
    /** @var \google\protobuf\EnumOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @param int $idx
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function getValue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\EnumValueDescriptorProto $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setValue(\google\protobuf\EnumValueDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <value>
     *
     * @return \google\protobuf\EnumValueDescriptorProto[]
     */
    public function getValueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <value>
     *
     * @param \google\protobuf\EnumValueDescriptorProto $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function addValue(\google\protobuf\EnumValueDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\EnumOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\EnumOptions $value
     * @return \google\protobuf\EnumDescriptorProto
     */
    public function setOptions(\google\protobuf\EnumOptions $value){
      return $this->_set(3, $value);
    }
    
  }
}

namespace google\protobuf {

  class EnumValueDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\EnumValueDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  number = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "number";
        $f->nameOrig  = "number";
        $f->type      = 5;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional .google.protobuf.EnumValueOptions options = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\EnumValueOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var int */
    public $number = null;
    
    /** @var \google\protobuf\EnumValueOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <number> value
     *
     * @return int
     */
    public function getNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <number> value
     *
     * @param int $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\EnumValueOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\EnumValueOptions $value
     * @return \google\protobuf\EnumValueDescriptorProto
     */
    public function setOptions(\google\protobuf\EnumValueOptions $value){
      return $this->_set(3, $value);
    }
    
  }
}

namespace google\protobuf {

  class ServiceDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\ServiceDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // repeated .google.protobuf.MethodDescriptorProto method = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "method";
        $f->nameOrig  = "method";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\MethodDescriptorProto";
        $descriptor->addField($f);

        // optional .google.protobuf.ServiceOptions options = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\ServiceOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var \google\protobuf\MethodDescriptorProto[] */
    public $method = array();
    
    /** @var \google\protobuf\ServiceOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <method> has a value
     *
     * @return boolean
     */
    public function hasMethod(){
      return $this->_has(2);
    }
    
    /**
     * Clear <method> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearMethod(){
      return $this->_clear(2);
    }
    
    /**
     * Get <method> value
     *
     * @param int $idx
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function getMethod($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <method> value
     *
     * @param \google\protobuf\MethodDescriptorProto $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setMethod(\google\protobuf\MethodDescriptorProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <method>
     *
     * @return \google\protobuf\MethodDescriptorProto[]
     */
    public function getMethodList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <method>
     *
     * @param \google\protobuf\MethodDescriptorProto $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function addMethod(\google\protobuf\MethodDescriptorProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\ServiceOptions
     */
    public function getOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\ServiceOptions $value
     * @return \google\protobuf\ServiceDescriptorProto
     */
    public function setOptions(\google\protobuf\ServiceOptions $value){
      return $this->_set(3, $value);
    }
    
  }
}

namespace google\protobuf {

  class MethodDescriptorProto extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\MethodDescriptorProto");

        // optional  name = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  input_type = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "input_type";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  output_type = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "output_type";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional .google.protobuf.MethodOptions options = 4
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 4;
        $f->name      = "options";
        $f->nameOrig  = "options";
        $f->type      = 11;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\MethodOptions";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name = null;
    
    /** @var string */
    public $input_type = null;
    
    /** @var string */
    public $output_type = null;
    
    /** @var \google\protobuf\MethodOptions */
    public $options = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <input_type> has a value
     *
     * @return boolean
     */
    public function hasInputType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <input_type> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearInputType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <input_type> value
     *
     * @return string
     */
    public function getInputType(){
      return $this->_get(2);
    }
    
    /**
     * Set <input_type> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setInputType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <output_type> has a value
     *
     * @return boolean
     */
    public function hasOutputType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <output_type> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearOutputType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <output_type> value
     *
     * @return string
     */
    public function getOutputType(){
      return $this->_get(3);
    }
    
    /**
     * Set <output_type> value
     *
     * @param string $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setOutputType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(4);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function clearOptions(){
      return $this->_clear(4);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\protobuf\MethodOptions
     */
    public function getOptions(){
      return $this->_get(4);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\protobuf\MethodOptions $value
     * @return \google\protobuf\MethodDescriptorProto
     */
    public function setOptions(\google\protobuf\MethodOptions $value){
      return $this->_set(4, $value);
    }
    
  }
}

namespace google\protobuf {

  class FileOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\FileOptions");

        // optional  java_package = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "java_package";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  java_outer_classname = 8
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 8;
        $f->name      = "java_outer_classname";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  java_multiple_files = 10
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 10;
        $f->name      = "java_multiple_files";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional  java_generate_equals_and_hash = 20
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 20;
        $f->name      = "java_generate_equals_and_hash";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 9;
        $f->name      = "optimize_for";
        $f->type      = 14;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FileOptions\OptimizeMode";
        $f->default   = "SPEED";
        $descriptor->addField($f);

        // optional  cc_generic_services = 16
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 16;
        $f->name      = "cc_generic_services";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional  java_generic_services = 17
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 17;
        $f->name      = "java_generic_services";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional  py_generic_services = 18
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 18;
        $f->name      = "py_generic_services";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $java_package = null;
    
    /** @var string */
    public $java_outer_classname = null;
    
    /** @var boolean */
    public $java_multiple_files = true;
    
    /** @var boolean */
    public $java_generate_equals_and_hash = true;
    
    /** @var int - \google\protobuf\FileOptions\OptimizeMode */
    public $optimize_for = "SPEED";
    
    /** @var boolean */
    public $cc_generic_services = true;
    
    /** @var boolean */
    public $java_generic_services = true;
    
    /** @var boolean */
    public $py_generic_services = true;
    
    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <java_package> has a value
     *
     * @return boolean
     */
    public function hasJavaPackage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <java_package> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaPackage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <java_package> value
     *
     * @return string
     */
    public function getJavaPackage(){
      return $this->_get(1);
    }
    
    /**
     * Set <java_package> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaPackage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <java_outer_classname> has a value
     *
     * @return boolean
     */
    public function hasJavaOuterClassname(){
      return $this->_has(8);
    }
    
    /**
     * Clear <java_outer_classname> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaOuterClassname(){
      return $this->_clear(8);
    }
    
    /**
     * Get <java_outer_classname> value
     *
     * @return string
     */
    public function getJavaOuterClassname(){
      return $this->_get(8);
    }
    
    /**
     * Set <java_outer_classname> value
     *
     * @param string $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaOuterClassname( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <java_multiple_files> has a value
     *
     * @return boolean
     */
    public function hasJavaMultipleFiles(){
      return $this->_has(10);
    }
    
    /**
     * Clear <java_multiple_files> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaMultipleFiles(){
      return $this->_clear(10);
    }
    
    /**
     * Get <java_multiple_files> value
     *
     * @return boolean
     */
    public function getJavaMultipleFiles(){
      return $this->_get(10);
    }
    
    /**
     * Set <java_multiple_files> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaMultipleFiles( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <java_generate_equals_and_hash> has a value
     *
     * @return boolean
     */
    public function hasJavaGenerateEqualsAndHash(){
      return $this->_has(20);
    }
    
    /**
     * Clear <java_generate_equals_and_hash> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaGenerateEqualsAndHash(){
      return $this->_clear(20);
    }
    
    /**
     * Get <java_generate_equals_and_hash> value
     *
     * @return boolean
     */
    public function getJavaGenerateEqualsAndHash(){
      return $this->_get(20);
    }
    
    /**
     * Set <java_generate_equals_and_hash> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaGenerateEqualsAndHash( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <optimize_for> has a value
     *
     * @return boolean
     */
    public function hasOptimizeFor(){
      return $this->_has(9);
    }
    
    /**
     * Clear <optimize_for> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearOptimizeFor(){
      return $this->_clear(9);
    }
    
    /**
     * Get <optimize_for> value
     *
     * @return int - \google\protobuf\FileOptions\OptimizeMode
     */
    public function getOptimizeFor(){
      return $this->_get(9);
    }
    
    /**
     * Set <optimize_for> value
     *
     * @param int - \google\protobuf\FileOptions\OptimizeMode $value
     * @return \google\protobuf\FileOptions
     */
    public function setOptimizeFor( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <cc_generic_services> has a value
     *
     * @return boolean
     */
    public function hasCcGenericServices(){
      return $this->_has(16);
    }
    
    /**
     * Clear <cc_generic_services> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearCcGenericServices(){
      return $this->_clear(16);
    }
    
    /**
     * Get <cc_generic_services> value
     *
     * @return boolean
     */
    public function getCcGenericServices(){
      return $this->_get(16);
    }
    
    /**
     * Set <cc_generic_services> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setCcGenericServices( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <java_generic_services> has a value
     *
     * @return boolean
     */
    public function hasJavaGenericServices(){
      return $this->_has(17);
    }
    
    /**
     * Clear <java_generic_services> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearJavaGenericServices(){
      return $this->_clear(17);
    }
    
    /**
     * Get <java_generic_services> value
     *
     * @return boolean
     */
    public function getJavaGenericServices(){
      return $this->_get(17);
    }
    
    /**
     * Set <java_generic_services> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setJavaGenericServices( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <py_generic_services> has a value
     *
     * @return boolean
     */
    public function hasPyGenericServices(){
      return $this->_has(18);
    }
    
    /**
     * Clear <py_generic_services> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearPyGenericServices(){
      return $this->_clear(18);
    }
    
    /**
     * Get <py_generic_services> value
     *
     * @return boolean
     */
    public function getPyGenericServices(){
      return $this->_get(18);
    }
    
    /**
     * Set <py_generic_services> value
     *
     * @param boolean $value
     * @return \google\protobuf\FileOptions
     */
    public function setPyGenericServices( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\FileOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\FileOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\FileOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf\FileOptions {

  class OptimizeMode {
    const SPEED = 1;
    const CODE_SIZE = 2;
    const LITE_RUNTIME = 3;
  }
}

namespace google\protobuf {

  class MessageOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\MessageOptions");

        // optional  message_set_wire_format = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "message_set_wire_format";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional  no_standard_descriptor_accessor = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "no_standard_descriptor_accessor";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var boolean */
    public $message_set_wire_format = true;
    
    /** @var boolean */
    public $no_standard_descriptor_accessor = true;
    
    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <message_set_wire_format> has a value
     *
     * @return boolean
     */
    public function hasMessageSetWireFormat(){
      return $this->_has(1);
    }
    
    /**
     * Clear <message_set_wire_format> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function clearMessageSetWireFormat(){
      return $this->_clear(1);
    }
    
    /**
     * Get <message_set_wire_format> value
     *
     * @return boolean
     */
    public function getMessageSetWireFormat(){
      return $this->_get(1);
    }
    
    /**
     * Set <message_set_wire_format> value
     *
     * @param boolean $value
     * @return \google\protobuf\MessageOptions
     */
    public function setMessageSetWireFormat( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <no_standard_descriptor_accessor> has a value
     *
     * @return boolean
     */
    public function hasNoStandardDescriptorAccessor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <no_standard_descriptor_accessor> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function clearNoStandardDescriptorAccessor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <no_standard_descriptor_accessor> value
     *
     * @return boolean
     */
    public function getNoStandardDescriptorAccessor(){
      return $this->_get(2);
    }
    
    /**
     * Set <no_standard_descriptor_accessor> value
     *
     * @param boolean $value
     * @return \google\protobuf\MessageOptions
     */
    public function setNoStandardDescriptorAccessor( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\MessageOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\MessageOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\MessageOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf {

  class FieldOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\FieldOptions");

        // optional .google.protobuf.FieldOptions.CType ctype = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "ctype";
        $f->nameOrig  = "ctype";
        $f->type      = 14;
        $f->rule      = 1;
        $f->reference = "\google\protobuf\FieldOptions\CType";
        $f->default   = "STRING";
        $descriptor->addField($f);

        // optional  packed = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "packed";
        $f->nameOrig  = "packed";
        $f->type      = 8;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  deprecated = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "deprecated";
        $f->nameOrig  = "deprecated";
        $f->type      = 8;
        $f->rule      = 1;
        $f->default   = true;
        $descriptor->addField($f);

        // optional  experimental_map_key = 9
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 9;
        $f->name      = "experimental_map_key";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var int - \google\protobuf\FieldOptions\CType */
    public $ctype = "STRING";
    
    /** @var boolean */
    public $packed = null;
    
    /** @var boolean */
    public $deprecated = true;
    
    /** @var string */
    public $experimental_map_key = null;
    
    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <ctype> has a value
     *
     * @return boolean
     */
    public function hasCtype(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ctype> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearCtype(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ctype> value
     *
     * @return int - \google\protobuf\FieldOptions\CType
     */
    public function getCtype(){
      return $this->_get(1);
    }
    
    /**
     * Set <ctype> value
     *
     * @param int - \google\protobuf\FieldOptions\CType $value
     * @return \google\protobuf\FieldOptions
     */
    public function setCtype( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <packed> has a value
     *
     * @return boolean
     */
    public function hasPacked(){
      return $this->_has(2);
    }
    
    /**
     * Clear <packed> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearPacked(){
      return $this->_clear(2);
    }
    
    /**
     * Get <packed> value
     *
     * @return boolean
     */
    public function getPacked(){
      return $this->_get(2);
    }
    
    /**
     * Set <packed> value
     *
     * @param boolean $value
     * @return \google\protobuf\FieldOptions
     */
    public function setPacked( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <deprecated> has a value
     *
     * @return boolean
     */
    public function hasDeprecated(){
      return $this->_has(3);
    }
    
    /**
     * Clear <deprecated> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearDeprecated(){
      return $this->_clear(3);
    }
    
    /**
     * Get <deprecated> value
     *
     * @return boolean
     */
    public function getDeprecated(){
      return $this->_get(3);
    }
    
    /**
     * Set <deprecated> value
     *
     * @param boolean $value
     * @return \google\protobuf\FieldOptions
     */
    public function setDeprecated( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <experimental_map_key> has a value
     *
     * @return boolean
     */
    public function hasExperimentalMapKey(){
      return $this->_has(9);
    }
    
    /**
     * Clear <experimental_map_key> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearExperimentalMapKey(){
      return $this->_clear(9);
    }
    
    /**
     * Get <experimental_map_key> value
     *
     * @return string
     */
    public function getExperimentalMapKey(){
      return $this->_get(9);
    }
    
    /**
     * Set <experimental_map_key> value
     *
     * @param string $value
     * @return \google\protobuf\FieldOptions
     */
    public function setExperimentalMapKey( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\FieldOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\FieldOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\FieldOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf\FieldOptions {

  class CType {
    const STRING = 0;
    const CORD = 1;
    const STRING_PIECE = 2;
  }
}

namespace google\protobuf {

  class EnumOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\EnumOptions");

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\EnumOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\EnumOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\EnumOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf {

  class EnumValueOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\EnumValueOptions");

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\EnumValueOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\EnumValueOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\EnumValueOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf {

  class ServiceOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\ServiceOptions");

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\ServiceOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\ServiceOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\ServiceOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf {

  class MethodOptions extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\MethodOptions");

        // repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 999;
        $f->name      = "uninterpreted_option";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\UninterpretedOption[] */
    public $uninterpreted_option = array();
    

    /**
     * Check if <uninterpreted_option> has a value
     *
     * @return boolean
     */
    public function hasUninterpretedOption(){
      return $this->_has(999);
    }
    
    /**
     * Clear <uninterpreted_option> value
     *
     * @return \google\protobuf\MethodOptions
     */
    public function clearUninterpretedOption(){
      return $this->_clear(999);
    }
    
    /**
     * Get <uninterpreted_option> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption
     */
    public function getUninterpretedOption($idx = NULL){
      return $this->_get(999, $idx);
    }
    
    /**
     * Set <uninterpreted_option> value
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\MethodOptions
     */
    public function setUninterpretedOption(\google\protobuf\UninterpretedOption $value, $idx = NULL){
      return $this->_set(999, $value, $idx);
    }
    
    /**
     * Get all elements of <uninterpreted_option>
     *
     * @return \google\protobuf\UninterpretedOption[]
     */
    public function getUninterpretedOptionList(){
     return $this->_get(999);
    }
    
    /**
     * Add a new element to <uninterpreted_option>
     *
     * @param \google\protobuf\UninterpretedOption $value
     * @return \google\protobuf\MethodOptions
     */
    public function addUninterpretedOption(\google\protobuf\UninterpretedOption $value){
     return $this->_add(999, $value);
    }
    
  }
}

namespace google\protobuf {

  class UninterpretedOption extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\UninterpretedOption");

        // repeated .google.protobuf.UninterpretedOption.NamePart name = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "name";
        $f->nameOrig  = "name";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\UninterpretedOption\NamePart";
        $descriptor->addField($f);

        // optional  identifier_value = 3
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 3;
        $f->name      = "identifier_value";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  positive_int_value = 4
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 4;
        $f->name      = "positive_int_value";
        $f->type      = 4;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  negative_int_value = 5
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 5;
        $f->name      = "negative_int_value";
        $f->type      = 3;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  double_value = 6
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 6;
        $f->name      = "double_value";
        $f->type      = 1;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  string_value = 7
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 7;
        $f->name      = "string_value";
        $f->type      = 12;
        $f->rule      = 1;
        $descriptor->addField($f);

        // optional  aggregate_value = 8
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 8;
        $f->name      = "aggregate_value";
        $f->type      = 9;
        $f->rule      = 1;
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\UninterpretedOption\NamePart[] */
    public $name = array();
    
    /** @var string */
    public $identifier_value = null;
    
    /** @var int */
    public $positive_int_value = null;
    
    /** @var int */
    public $negative_int_value = null;
    
    /** @var float */
    public $double_value = null;
    
    /** @var string */
    public $string_value = null;
    
    /** @var string */
    public $aggregate_value = null;
    

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @param int $idx
     * @return \google\protobuf\UninterpretedOption\NamePart
     */
    public function getName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <name> value
     *
     * @param \google\protobuf\UninterpretedOption\NamePart $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setName(\google\protobuf\UninterpretedOption\NamePart $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <name>
     *
     * @return \google\protobuf\UninterpretedOption\NamePart[]
     */
    public function getNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <name>
     *
     * @param \google\protobuf\UninterpretedOption\NamePart $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function addName(\google\protobuf\UninterpretedOption\NamePart $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <identifier_value> has a value
     *
     * @return boolean
     */
    public function hasIdentifierValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <identifier_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearIdentifierValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <identifier_value> value
     *
     * @return string
     */
    public function getIdentifierValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <identifier_value> value
     *
     * @param string $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setIdentifierValue( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <positive_int_value> has a value
     *
     * @return boolean
     */
    public function hasPositiveIntValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <positive_int_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearPositiveIntValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <positive_int_value> value
     *
     * @return int
     */
    public function getPositiveIntValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <positive_int_value> value
     *
     * @param int $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setPositiveIntValue( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <negative_int_value> has a value
     *
     * @return boolean
     */
    public function hasNegativeIntValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <negative_int_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearNegativeIntValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <negative_int_value> value
     *
     * @return int
     */
    public function getNegativeIntValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <negative_int_value> value
     *
     * @param int $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setNegativeIntValue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <double_value> has a value
     *
     * @return boolean
     */
    public function hasDoubleValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <double_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearDoubleValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <double_value> value
     *
     * @return float
     */
    public function getDoubleValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <double_value> value
     *
     * @param float $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setDoubleValue( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <string_value> has a value
     *
     * @return boolean
     */
    public function hasStringValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <string_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearStringValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <string_value> value
     *
     * @return string
     */
    public function getStringValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <string_value> value
     *
     * @param string $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setStringValue( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <aggregate_value> has a value
     *
     * @return boolean
     */
    public function hasAggregateValue(){
      return $this->_has(8);
    }
    
    /**
     * Clear <aggregate_value> value
     *
     * @return \google\protobuf\UninterpretedOption
     */
    public function clearAggregateValue(){
      return $this->_clear(8);
    }
    
    /**
     * Get <aggregate_value> value
     *
     * @return string
     */
    public function getAggregateValue(){
      return $this->_get(8);
    }
    
    /**
     * Set <aggregate_value> value
     *
     * @param string $value
     * @return \google\protobuf\UninterpretedOption
     */
    public function setAggregateValue( $value){
      return $this->_set(8, $value);
    }
    
  }
}

namespace google\protobuf\UninterpretedOption {

  class NamePart extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\UninterpretedOption\NamePart");

        // required  name_part = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "name_part";
        $f->type      = 9;
        $f->rule      = 2;
        $descriptor->addField($f);

        // required  is_extension = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name  = "is_extension";
        $f->type      = 8;
        $f->rule      = 2;
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var string */
    public $name_part = null;
    
    /** @var boolean */
    public $is_extension = null;
    

    /**
     * Check if <name_part> has a value
     *
     * @return boolean
     */
    public function hasNamePart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name_part> value
     *
     * @return \google\protobuf\UninterpretedOption\NamePart
     */
    public function clearNamePart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name_part> value
     *
     * @return string
     */
    public function getNamePart(){
      return $this->_get(1);
    }
    
    /**
     * Set <name_part> value
     *
     * @param string $value
     * @return \google\protobuf\UninterpretedOption\NamePart
     */
    public function setNamePart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <is_extension> has a value
     *
     * @return boolean
     */
    public function hasIsExtension(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_extension> value
     *
     * @return \google\protobuf\UninterpretedOption\NamePart
     */
    public function clearIsExtension(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_extension> value
     *
     * @return boolean
     */
    public function getIsExtension(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_extension> value
     *
     * @param boolean $value
     * @return \google\protobuf\UninterpretedOption\NamePart
     */
    public function setIsExtension( $value){
      return $this->_set(2, $value);
    }
    
  }
}

namespace google\protobuf {

  class SourceCodeInfo extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\SourceCodeInfo");

        // repeated .google.protobuf.SourceCodeInfo.Location location = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "location";
        $f->nameOrig  = "location";
        $f->type      = 11;
        $f->rule      = 3;
        $f->reference = "\google\protobuf\SourceCodeInfo\Location";
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var \google\protobuf\SourceCodeInfo\Location[] */
    public $location = array();
    

    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location> value
     *
     * @return \google\protobuf\SourceCodeInfo
     */
    public function clearLocation(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location> value
     *
     * @param int $idx
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function getLocation($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <location> value
     *
     * @param \google\protobuf\SourceCodeInfo\Location $value
     * @return \google\protobuf\SourceCodeInfo
     */
    public function setLocation(\google\protobuf\SourceCodeInfo\Location $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <location>
     *
     * @return \google\protobuf\SourceCodeInfo\Location[]
     */
    public function getLocationList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <location>
     *
     * @param \google\protobuf\SourceCodeInfo\Location $value
     * @return \google\protobuf\SourceCodeInfo
     */
    public function addLocation(\google\protobuf\SourceCodeInfo\Location $value){
     return $this->_add(1, $value);
    }
    
  }
}

namespace google\protobuf\SourceCodeInfo {

  class Location extends \DrSlump\Protobuf\Message {

    /** @var \DrSlump\Protobuf\Descriptor */
    protected static $__descriptor;
    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor(\DrSlump\Protobuf\Descriptor $descriptor = NULL)
    {
      if (NULL !== $descriptor) {
        self::$__descriptor = $descriptor;
        return self::$__descriptor;
      }

      if (!self::$__descriptor) {
        $descriptor = new \DrSlump\Protobuf\Descriptor("\google\protobuf\SourceCodeInfo\Location");

        // repeated  path = 1
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 1;
        $f->name      = "path";
        $f->nameOrig  = "path";
        $f->type      = 5;
        $f->rule      = 3;
        $descriptor->addField($f);

        // repeated  span = 2
        $f = new \DrSlump\Protobuf\Field();
        $f->number    = 2;
        $f->name      = "span";
        $f->nameOrig  = "span";
        $f->type      = 5;
        $f->rule      = 3;
        $descriptor->addField($f);

        foreach (self::$__extensions as $cb) {
          $descriptor->addField($cb(), true);
        }

        self::$__descriptor = $descriptor;
      }

      return self::$__descriptor;
    }

    /** @var int[] */
    public $path = array();
    
    /** @var int[] */
    public $span = array();
    

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function clearPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <path> value
     *
     * @param int $idx
     * @return int
     */
    public function getPath($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <path> value
     *
     * @param int $value
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function setPath( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <path>
     *
     * @return int[]
     */
    public function getPathList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <path>
     *
     * @param int $value
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function addPath( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <span> has a value
     *
     * @return boolean
     */
    public function hasSpan(){
      return $this->_has(2);
    }
    
    /**
     * Clear <span> value
     *
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function clearSpan(){
      return $this->_clear(2);
    }
    
    /**
     * Get <span> value
     *
     * @param int $idx
     * @return int
     */
    public function getSpan($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <span> value
     *
     * @param int $value
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function setSpan( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <span>
     *
     * @return int[]
     */
    public function getSpanList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <span>
     *
     * @param int $value
     * @return \google\protobuf\SourceCodeInfo\Location
     */
    public function addSpan( $value){
     return $this->_add(2, $value);
    }
    
  }
}
